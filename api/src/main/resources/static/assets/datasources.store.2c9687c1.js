import{b as S,a as g,h as f,f as v,k as p,m as T,l as w,a2 as b,ag as i,ah as j,ai as y,u as r,aj as u,ak as c}from"./index.1c9f1618.js";var x=S({name:"QItemLabel",props:{overline:Boolean,caption:Boolean,header:Boolean,lines:[Number,String]},setup(e,{slots:o}){const t=g(()=>parseInt(e.lines,10)),a=g(()=>"q-item__label"+(e.overline===!0?" q-item__label--overline text-overline":"")+(e.caption===!0?" q-item__label--caption text-caption":"")+(e.header===!0?" q-item__label--header":"")+(t.value===1?" ellipsis":"")),s=g(()=>e.lines!==void 0&&t.value>1?{overflow:"hidden",display:"-webkit-box","-webkit-box-orient":"vertical","-webkit-line-clamp":t.value}:null);return()=>f("div",{style:s.value,class:a.value},v(o.default))}}),A=S({name:"QPage",props:{padding:Boolean,styleFn:Function},setup(e,{slots:o}){const{proxy:{$q:t}}=T(),a=p(w);p(b,()=>{console.error("QPage needs to be child of QPageContainer")});const s=g(()=>{const d=(a.header.space===!0?a.header.size:0)+(a.footer.space===!0?a.footer.size:0);if(typeof e.styleFn=="function"){const D=a.isContainer.value===!0?a.containerHeight.value:t.screen.height;return e.styleFn(d,D)}return{minHeight:a.isContainer.value===!0?a.containerHeight.value-d+"px":t.screen.height===0?d!==0?`calc(100vh - ${d}px)`:"100vh":t.screen.height-d+"px"}}),n=g(()=>`q-page${e.padding===!0?" q-layout-padding":""}`);return()=>f("main",{class:n.value,style:s.value},v(o.default))}}),l={getAll(e,o){return i.get("/project/"+e+"/datasources",{headers:{Authorization:`Bearer ${o}`}})},createDSPersistent(e,o,t){return i.post("/project/"+e+"/datasources/persist",o,{headers:{Authorization:`Bearer ${t}`}})},deleteDS(e,o,t){return i.delete("/project/"+e+"/datasources/"+o,{headers:{Authorization:`Bearer ${t}`}})},getAllTemporal(e,o){return i.get("/project/"+e+"/temp/ds",{headers:{Authorization:`Bearer ${o}`}})},deleteTemporal(e,o,t){return i.delete("/project/"+e+"/temp/ds/"+o,{headers:{Authorization:`Bearer ${t}`}})},createDSTemp(e,o,t){return i.post("/project/"+e+"/temp/ds",t,{headers:{"Content-Type":"multipart/form-data",Authorization:`Bearer ${o}`}})}},m={integrate(e,o,t){return i.post("/project/"+e+"/integration",o,{headers:{Authorization:`Bearer ${t}`}})},finishIntegration(e,o){return i.post("/project/"+e+"/integration/persist",null,{headers:{Authorization:`Bearer ${o}`}})}};const h=j("integration",{state:()=>({project:{},projectTemporal:{},datasources:[],selectedDS:[],alignments:[]}),getters:{getSourceB(e){return e.selectedDS.length==1?e.selectedDS[0]:null},getGraphicalA(e){return e.project.graphicalGlobalSchema},getGraphicalB(e){return e.selectedDS.length==1?e.selectedDS[0].graphicalSchema:""},getGlobalSchema(e){return e.projectTemporal.graphicalGlobalSchema?e.projectTemporal.graphicalGlobalSchema:""},getGraphicalSchemaIntegration(e){return e.projectTemporal.graphicalSchemaIntegration?e.projectTemporal.graphicalSchemaIntegration:""},isDSEmpty(e){return e.datasources.length==0}},actions:{async init(){},async setProject(e){const o=y(),t=r();if(console.log("setting project to integration store.."),e)this.project=e;else if(!this.project.name){const a=await u.getProjectByID(o.params.id,t.user.accessToken);a.status==200&&(this.project=a.data)}t.user.accessToken&&(console.log("retrieving temporal data sources..."),this.getTemporalDatasources(),this.alignments=[])},deleteTemporalDS(e){const o=c(),t=r();l.deleteTemporal(this.project.id,e.id,t.user.accessToken).then(a=>{if(console.log("delete ds temporal"),console.log(a.data),a.status==204){let s=this.datasources.indexOf(e);s>-1?(console.log("dele index"),this.datasources.splice(s,1)):console.log("something wrong, could not find data source in array to delete it"),this.selectedDS.length>0&&this.selectedDS[0].id===e.id&&(console.log("data source deleter from selection"),this.selectedDS=[])}else console.log("check status!!! something wrong: ",a)}).catch(a=>{console.log("error deleting data sources"),console.log(a),o.negative("Error deleting data source")})},async getTemporalDatasources(){const e=c(),o=r();console.log("Pinia getting temporal data sources..."),await l.getAllTemporal(this.project.id,o.user.accessToken).then(t=>{console.log("ds temporal received",t),t.data===""?this.datasources=[]:this.datasources=t.data}).catch(t=>{console.log("error retrieving data sources"),console.log(t),e.negative("Cannot conect to the server.")})},addDataSource(e,o,t){const a=c(),s=r();console.log("adding data source...",o),l.createDSTemp(e,s.user.accessToken,o).then(n=>{console.log("createDSTemp()",n),n.status==201?(this.datasources.push(n.data),t(n.data)):a.negative("Cannot create datasource. Something went wrong in the server.")}).catch(n=>{console.log("error addding ds: ",n),a.negative("Something went wrong in the server.")})},addSelectedDatasource(e){this.selectedDS=[],this.selectedDS.push(e)},deleteSelectedDatasource(e){console.log("deleteselect: ",e),console.log("sources ; ",this.selectedDS);let o=this.selectedDS.indexOf(e);o>-1?(console.log("dele index"),this.selectedDS.splice(o,1)):this.selectedDS=this.selectedDS.filter(t=>t.id!=e.id)},finishIntegration(e){this.deleteSelectedDatasource(e);let o=this.datasources.indexOf(e);o>-1?(console.log("dele index"),this.datasources.splice(o,1)):console.log("something wrong, could not find data source in array to delete it")},addAligment(e,o){console.log("alignment store: ",e);let t={};o?(t.iriA=e.resourceA.iri,t.labelA=e.resourceA.label,t.iriB=e.resourceB.iri,t.labelB=e.resourceB.label,t.l=e.integratedLabel,t.type=e.type):t=e,this.alignments.push(t)},integrateTemporal(e){const o=r(),t=c();var a={dsB:this.selectedDS[0],alignments:this.alignments};m.integrate(this.project.id,a,o.user.accessToken).then(s=>{console.log("integration response...",s),s.status==201||s.status?(t.positive("Integration succeeded"),this.projectTemporal=s.data,e&&e()):t.negative("There was an error for the integration task")}).catch(s=>{console.log("error integrating ds"),t.negative("Something went wrong in the server. No possible to integrate it")})},saveIntegration(e){const o=r(),t=c();console.log("save intregration store...",o.user.accessToken),console.log("project id ",this.project.id),m.finishIntegration(this.project.id,o.user.accessToken).then(a=>{console.log("integration response...",a),a.status==200?(e&&e(this.selectedDS[0]),t.positive("Integration persistent succeeded")):t.negative("There was an error to save the integration")}).catch(a=>{console.log("error saving integration",a),t.negative("Something went wrong in the server. No possible to save integration")})},deleteAligment(e){console.log("aligment is ",e);let o=this.alignments.indexOf(e);console.log("index is ",o),this.alignments.splice(o,1)}}}),B=j("datasource",{state:()=>({project:{},datasources:[]}),getters:{getGlobalSchema(e){return e.project.graphicalGlobalSchema?e.project.graphicalGlobalSchema:""},getGraphicalSchemaIntegration(e){return e.project.graphicalSchemaIntegration?e.project.graphicalSchemaIntegration:""}},actions:{async init(){},async setProject(e){const o=y(),t=r(),a=h();if(console.log("setting project to datasources store",e),e)console.log("if proj"),this.project=e,a.setProject(e);else if(!this.project.name||this.project.id!=o.params.id){const s=await u.getProjectByID(o.params.id,t.user.accessToken);s.status==200&&(this.project=s.data,a.setProject(this.project))}t.user.accessToken&&(console.log("retrieving persistent data sources..."),this.getDatasources())},async updateProjectInfo(){console.log("updating project info");const e=r(),o=h(),t=await u.getProjectByID(this.project.id,e.user.accessToken);t.status==200&&(this.project=t.data,o.setProject(this.project))},async getDatasources(){const e=c(),o=r();console.log("Pinia getting data sources..."),await l.getAll(this.project.id,o.user.accessToken).then(t=>{console.log("ds received",t.data),t.data===""?this.datasources=[]:this.datasources=t.data,console.log(this.datasources)}).catch(t=>{console.log("error retrieving data sources"),console.log(t),e.negative("Cannot conect to the server.")})},persistDataSource(e){const o=c(),t=r(),a=h();console.log("persist data source...",e),l.createDSPersistent(this.project.id,e,t.user.accessToken).then(s=>{console.log("createPersistentDS()",s),s.status==201?(this.datasources.push(s.data),this.router.push({name:"datasources"}),a.finishIntegration(e),this.updateProjectInfo()):o.negative("Cannot integrate datasource with project. Something went wrong in the server.")}).catch(s=>{console.log("error integrating ds with project: ",s),o.negative("Something went wrong in the server.")})},deleteDataSource(e){const o=r(),t=c();l.deleteDS(this.project.id,e.id,o.user.accessToken).then(a=>{if(a.status==204){t.positive("Successfully deleted");let s=this.datasources.indexOf(e);s>-1&&(console.log("dele index"),this.datasources.splice(s,1)),this.updateProjectInfo()}else t.negative("Something went wrong in the server.")}).catch(a=>{console.log("error deleting data sources"),console.log(a),t.negative("Cannot delete data source. Error in the server.")})}}});export{A as Q,x as a,B as b,h as u};
